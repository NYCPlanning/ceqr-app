services:
  backend:
    build: backend
    entrypoint: ./entrypoint.sh
    volumes:
      - ./backend:/app
    ports:
      - 3000:3000
    env_file: 
      - backend/.env # sets our container's environment to from this file.  You need to make sure to configure this before docker-compose up!
    healthcheck:
      test: ["CMD", "curl", "http://localhost:3000"]
      interval: 10s
      timeout: 30s
      retries: 3
    stdin_open: true
  frontend:
    build: frontend
    volumes:
      - ./frontend:/usr/app
    ports:
      - 4200:4200
    environment:
      HOST: http://localhost:3000
      DISABLE_MIRAGE: 'true'
    healthcheck:
      test: ["CMD", "curl", "http://localhost:4200"]
      interval: 1m
      timeout: 30s
      start_period: 5m
      retries: 5
  postgis:
    image: postgis/postgis # uses the default settings from this image.  Only change is that our migrate container will execute rails commands to setup ceqr_rails with our schema and migrations.
    ports:
      - 5432:5432
    volumes:
      # configures container to initialize with database backup if present
      - ./backend/db/backup:/docker-entrypoint-initdb.d
    environment:
      - POSTGRES_HOST_AUTH_METHOD=trust # <== not secure, only for local development
  # short-lived container to create db if not already running
  migrate:
    build: backend
    entrypoint: ./migrate.sh # see backend/migrate.sh for startup commands (checks state of our database and will run the rails commands as needed)
    volumes:
      - ./backend:/app # need our rails code in this container so that it has rails commands, migration & seed files
    env_file: 
      - backend/.env # also need to make sure it has the same environment so it can access ceqr_data db
