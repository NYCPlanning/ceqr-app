require 'rails_helper'

RSpec.describe PublicSchoolsAnalysis, type: :model do
  let(:project) { create(:project, build_year: 2026, bbls: [3007770001]) }

  before do
    @schoolSubdistrictMock = class_double('DoeSchoolSubdistricts')
    @schoolSubdistrictObject = double()

    allow(@schoolSubdistrictMock).to receive(:version).and_return(@schoolSubdistrictObject)

    allow(@schoolSubdistrictObject).to receive(:intersecting_with_bbls).and_return([
      {
        district: 15,
        subdistrict: 1
      }
    ])

    allow(@schoolSubdistrictObject).to receive(:for_subdistrict_pairs).and_return([
      {
        district: 15,
        subdistrict: 1,
        school_choice_ps: false,
        school_choice_is: true,
        geom: RGeo::WKRep::WKBParser.new(nil, support_ewkb: true).parse
      }
    ])

    stub_const("#{CeqrData}::DoeSchoolSubdistricts", @schoolSubdistrictMock)
  end

  it "sets subdistricts correctly" do
    expect(project.public_schools_analysis.subdistricts_from_db[0]['district']).to eq(15)
    expect(project.public_schools_analysis.subdistricts_from_db[0]['subdistrict']).to eq(1)
  end

  it "sets es_school_choice and is_school_choice correctly" do
    expect(project.public_schools_analysis.es_school_choice).to eq(false)
    expect(project.public_schools_analysis.is_school_choice).to eq(true)
  end

  it "sets bluebook correctly" do
    expect(project.public_schools_analysis.bluebook[0]['district']).to eq(15)
    expect(project.public_schools_analysis.bluebook[0]['subdistrict']).to eq(1)
  end

  it "sets lcgms correctly" do
    expect(project.public_schools_analysis.lcgms[0]['district']).to eq(15)
    expect(project.public_schools_analysis.lcgms[0]['subdistrict']).to eq(1)
  end

  it "sets sca projects correctly" do
    expect(project.public_schools_analysis.sca_projects[0]['district']).to eq(15)
    expect(project.public_schools_analysis.sca_projects[0]['subdistrict']).to eq(1)
  end

  it "sets future_enrollment_multipliers correctly" do
    expect(project.public_schools_analysis.future_enrollment_multipliers[0]['district']).to eq(15)
    expect(project.public_schools_analysis.future_enrollment_multipliers[0]['subdistrict']).to eq(1)
  end

  it "sets hs_projections correctly" do
    borough = project.public_schools_analysis.hs_projections.map {|n| n['borough']}
    expect(borough).to eq(['brooklyn'])
  end

  it "sets future_enrollment_projections correctly" do
    expect(project.public_schools_analysis.future_enrollment_projections[0]['district']).to eq(15)
  end

  it "sets hs_students_from_housing correctly" do
    # new_students in table sca_housing_pipeline_by_boro for Brooklyn is 4802
    expect(project.public_schools_analysis.hs_students_from_housing).to eq(4802)
  end

  it "sets set future_enrollment_new_housing correctly" do
    expect(project.public_schools_analysis.future_enrollment_new_housing[0]['district']).to eq(15)
    expect(project.public_schools_analysis.future_enrollment_new_housing[0]['subdistrict']).to eq(1)
  end

  it "sets set doe_util_changes correctly" do
    blubookBuildingIds = project.public_schools_analysis.bluebook.map {|b| b['bldg_id']}
    lcmgsBuildingsIds = project.public_schools_analysis.lcgms.map {|b| b['bldg_id']}

    allBuildingIds = (blubookBuildingIds + lcmgsBuildingsIds).uniq

    doeBuildingIds = project.public_schools_analysis.doe_util_changes.map {|b| b['bldg_id']}.uniq # two items for district 15 subdistrict 1

    expect(allBuildingIds).to include(doeBuildingIds[0], doeBuildingIds[1])
  end
end
